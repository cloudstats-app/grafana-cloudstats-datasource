{"version":3,"sources":["../src/datasource.js"],"names":["CloudStatsDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","id","name","provider","jsonData","q","withCredentials","headers","basicAuth","length","doRequest","method","then","response","status","message","title","options","query","replace","annotation","annotationQuery","range","datasource","enable","rangeRaw","data","console","log","result","datasourceRequest"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;sCAAaA,oB;AAEX,sCAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,eAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,eAAKC,GAAL,+BAAqCL,iBAAiBM,EAAtD;AACA,eAAKC,IAAL,GAAYP,iBAAiBO,IAA7B;AACA,eAAKC,QAAL,GAAgBR,iBAAiBS,QAAjB,CAA0BD,QAA1C;AACA,eAAKE,CAAL,GAAST,EAAT;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;AACA,eAAKQ,eAAL,GAAuBX,iBAAiBW,eAAxC;AACA,eAAKC,OAAL,GAAe,EAAC,gBAAgB,kBAAjB,EAAf;AACA,cAAI,OAAOZ,iBAAiBa,SAAxB,KAAsC,QAAtC,IAAkDb,iBAAiBa,SAAjB,CAA2BC,MAA3B,GAAoC,CAA1F,EAA6F;AAC3F,iBAAKF,OAAL,CAAa,eAAb,IAAgCZ,iBAAiBa,SAAjD;AACD;AACF;;;;2CAEgB;AACf,mBAAO,KAAKE,SAAL,CAAe;AACpBV,mBAAK,KAAKA,GAAL,GAAW,GADI;AAEpBW,sBAAQ;AAFY,aAAf,EAGJC,IAHI,CAGC,oBAAY;AAClB,kBAAIC,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,uBAAO,EAAEA,QAAQ,SAAV,EAAqBC,SAAS,wBAA9B,EAAwDC,OAAO,SAA/D,EAAP;AACD,eAFD,MAEO,IAAIH,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AAClC,uBAAO,EAAEA,QAAQ,OAAV,EAAmBC,SAAS,kCAA5B,EAAgEC,OAAO,cAAvE,EAAP;AACD,eAFM,MAEA,IAAIH,SAASC,MAAT,KAAoB,GAAxB,EAA6B;AAClC,uBAAO,EAAEA,QAAQ,OAAV,EAAmBC,SAAS,sBAA5B,EAAoDC,OAAO,aAA3D,EAAP;AACD;AACF,aAXM,CAAP;AAYD;;;0CAEeC,O,EAAS;AACvB,gBAAIC,QAAQ,KAAKpB,WAAL,CAAiBqB,OAAjB,CAAyBF,QAAQG,UAAR,CAAmBF,KAA5C,EAAmD,EAAnD,EAAuD,MAAvD,CAAZ;AACA,gBAAIG,kBAAkB;AACpBC,qBAAOL,QAAQK,KADK;AAEpBF,0BAAY;AACVlB,sBAAMe,QAAQG,UAAR,CAAmBlB,IADf;AAEVqB,4BAAYN,QAAQG,UAAR,CAAmBG,UAFrB;AAGVC,wBAAQP,QAAQG,UAAR,CAAmBI,MAHjB;AAIVN,uBAAOA;AAJG,eAFQ;AAQpBO,wBAAUR,QAAQQ;AARE,aAAtB;;AAWA,mBAAO,KAAKf,SAAL,CAAe;AACpBV,mBAAK,KAAKA,GAAL,GAAW,UADI;AAEpBW,sBAAQ,MAFY;AAGpBe,oBAAML;AAHc,aAAf,EAIJT,IAJI,CAIC,kBAAU;AAChBe,sBAAQC,GAAR,CAAYC,OAAOH,IAAnB;AACA,qBAAOG,OAAOH,IAAd;AACD,aAPM,CAAP;AAQD;;;oCAEST,O,EAAS;AACjBA,oBAAQX,eAAR,GAA0B,KAAKA,eAA/B;AACAW,oBAAQV,OAAR,GAAkB,KAAKA,OAAvB;;AAEA,mBAAO,KAAKV,UAAL,CAAgBiC,iBAAhB,CAAkCb,OAAlC,CAAP;AACD","file":"datasource.js","sourcesContent":["export class CloudStatsDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = `/api/datasources/proxy/${instanceSettings.id}/v1`;\n    this.name = instanceSettings.name;\n    this.provider = instanceSettings.jsonData.provider;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 201) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      } else if (response.status === 401) {\n        return { status: \"alert\", message: \"Unauthorized access, check token\", title: \"Unauthorized\" };\n      } else if (response.status === 403) {\n        return { status: \"alert\", message: \"Provider not allowed\", title: \"Not Allowed\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/events/',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      console.log(result.data);\n      return result.data;\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n}"]}